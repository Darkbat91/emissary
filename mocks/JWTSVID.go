// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"

// JWTSVID is an autogenerated mock type for the JWTSVID type
type JWTSVID struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, spiffeID, egressAudience
func (_m *JWTSVID) Fetch(ctx context.Context, spiffeID string, egressAudience string) (string, error) {
	ret := _m.Called(ctx, spiffeID, egressAudience)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, spiffeID, egressAudience)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, spiffeID, egressAudience)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, svid, identifier
func (_m *JWTSVID) Validate(ctx context.Context, svid string, identifier string) (bool, string, error) {
	ret := _m.Called(ctx, svid, identifier)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, svid, identifier)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, svid, identifier)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, svid, identifier)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
