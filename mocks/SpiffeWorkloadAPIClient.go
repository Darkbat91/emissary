// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import workload "github.com/spiffe/go-spiffe/proto/spiffe/workload"

// SpiffeWorkloadAPIClient is an autogenerated mock type for the SpiffeWorkloadAPIClient type
type SpiffeWorkloadAPIClient struct {
	mock.Mock
}

// FetchJWTBundles provides a mock function with given fields: ctx, in, opts
func (_m *SpiffeWorkloadAPIClient) FetchJWTBundles(ctx context.Context, in *workload.JWTBundlesRequest, opts ...grpc.CallOption) (workload.SpiffeWorkloadAPI_FetchJWTBundlesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 workload.SpiffeWorkloadAPI_FetchJWTBundlesClient
	if rf, ok := ret.Get(0).(func(context.Context, *workload.JWTBundlesRequest, ...grpc.CallOption) workload.SpiffeWorkloadAPI_FetchJWTBundlesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workload.SpiffeWorkloadAPI_FetchJWTBundlesClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workload.JWTBundlesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchJWTSVID provides a mock function with given fields: ctx, in, opts
func (_m *SpiffeWorkloadAPIClient) FetchJWTSVID(ctx context.Context, in *workload.JWTSVIDRequest, opts ...grpc.CallOption) (*workload.JWTSVIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *workload.JWTSVIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *workload.JWTSVIDRequest, ...grpc.CallOption) *workload.JWTSVIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workload.JWTSVIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workload.JWTSVIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchX509SVID provides a mock function with given fields: ctx, in, opts
func (_m *SpiffeWorkloadAPIClient) FetchX509SVID(ctx context.Context, in *workload.X509SVIDRequest, opts ...grpc.CallOption) (workload.SpiffeWorkloadAPI_FetchX509SVIDClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 workload.SpiffeWorkloadAPI_FetchX509SVIDClient
	if rf, ok := ret.Get(0).(func(context.Context, *workload.X509SVIDRequest, ...grpc.CallOption) workload.SpiffeWorkloadAPI_FetchX509SVIDClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workload.SpiffeWorkloadAPI_FetchX509SVIDClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workload.X509SVIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateJWTSVID provides a mock function with given fields: ctx, in, opts
func (_m *SpiffeWorkloadAPIClient) ValidateJWTSVID(ctx context.Context, in *workload.ValidateJWTSVIDRequest, opts ...grpc.CallOption) (*workload.ValidateJWTSVIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *workload.ValidateJWTSVIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *workload.ValidateJWTSVIDRequest, ...grpc.CallOption) *workload.ValidateJWTSVIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workload.ValidateJWTSVIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workload.ValidateJWTSVIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
